
Mini_Project_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003396  0000342a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800184  00800184  0000354e  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f44  00000000  00000000  00005efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000071d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000095dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a963  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bb3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 07 	call	0xe7a	; 0xe7a <main>
      8a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 57       	subi	r30, 0x7F	; 127
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
#include "buzzer.h"


/*Initializes the buzzer pin direction and turn off the buzzer.*/
void Buzzer_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID , PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	Buzzer_off();
     e40:	0e 94 25 07 	call	0xe4a	; 0xe4a <Buzzer_off>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <Buzzer_off>:
/* Activates the buzzer. */
void Buzzer_off(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <Buzzer_on>:
/*Deactivates the buzzer.*/
void Buzzer_on(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_HIGH);
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	65 e0       	ldi	r22, 0x05	; 5
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <main>:
#include "buzzer.h"
#include "lcd.h"
#include "led.h"
#include "ultrasonic.h"
int main(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <main+0x6>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     e84:	af e5       	ldi	r26, 0x5F	; 95
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ef e5       	ldi	r30, 0x5F	; 95
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	8c 93       	st	X, r24
	Buzzer_init();
     e92:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	LCD_init();
     e96:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_init>
	LEDS_init();
     e9a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <LEDS_init>
	Ultrasonic_init();
     e9e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <Ultrasonic_init>
	uint16 dis=0;
     ea2:	1a 82       	std	Y+2, r1	; 0x02
     ea4:	19 82       	std	Y+1, r1	; 0x01
	LCD_displayString("Distance=");
     ea6:	80 e6       	ldi	r24, 0x60	; 96
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
	LCD_displayStringRowColumn(0,13,"cm");
     eae:	2a e6       	ldi	r18, 0x6A	; 106
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	6d e0       	ldi	r22, 0x0D	; 13
     eb6:	a9 01       	movw	r20, r18
     eb8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>

	while(1)
	{

		dis=Ultrasonic_readDistance();
     ebc:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <Ultrasonic_readDistance>
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0,10);
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	6a e0       	ldi	r22, 0x0A	; 10
     ec8:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LCD_moveCursor>

		if(dis<9)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	89 30       	cpi	r24, 0x09	; 9
     ed2:	91 05       	cpc	r25, r1
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <main+0x6e>
		{
			LCD_intgerToString(dis);
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <LCD_intgerToString>
			LCD_displayString(" ");
     ede:	8d e6       	ldi	r24, 0x6D	; 109
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <main+0x76>
		}
		else
		{
			LCD_intgerToString(dis);
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <LCD_intgerToString>
		}

		if(dis>20)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	85 31       	cpi	r24, 0x15	; 21
     ef6:	91 05       	cpc	r25, r1
     ef8:	60 f0       	brcs	.+24     	; 0xf12 <main+0x98>
		{
			/*All LEDs OFF, Buzzer OFF.*/
			Buzzer_off();
     efa:	0e 94 25 07 	call	0xe4a	; 0xe4a <Buzzer_off>
			LED_all_Are_OFF();
     efe:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LED_all_Are_OFF>
			LCD_displayStringRowColumn(1,5,"    ");
     f02:	2f e6       	ldi	r18, 0x6F	; 111
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	65 e0       	ldi	r22, 0x05	; 5
     f0a:	a9 01       	movw	r20, r18
     f0c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>
     f10:	d5 cf       	rjmp	.-86     	; 0xebc <main+0x42>
		}
		else if(dis>15)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	80 31       	cpi	r24, 0x10	; 16
     f18:	91 05       	cpc	r25, r1
     f1a:	98 f0       	brcs	.+38     	; 0xf42 <main+0xc8>
		{
			/*  Only Red LED ON, others OFF. */
			LED_on(RED);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			LED_off(GREEN);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
			LED_off(BLUE);
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
			Buzzer_off();
     f2e:	0e 94 25 07 	call	0xe4a	; 0xe4a <Buzzer_off>
			LCD_displayStringRowColumn(1,5,"    ");
     f32:	2f e6       	ldi	r18, 0x6F	; 111
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	65 e0       	ldi	r22, 0x05	; 5
     f3a:	a9 01       	movw	r20, r18
     f3c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>
     f40:	bd cf       	rjmp	.-134    	; 0xebc <main+0x42>
		}
		else if(dis>10)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	8b 30       	cpi	r24, 0x0B	; 11
     f48:	91 05       	cpc	r25, r1
     f4a:	98 f0       	brcs	.+38     	; 0xf72 <main+0xf8>
		{
			/*  Red and Green LEDs ON, Blue LED OFF. */
			LED_on(RED);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			LED_on(GREEN);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			LED_off(BLUE);
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
			Buzzer_off();
     f5e:	0e 94 25 07 	call	0xe4a	; 0xe4a <Buzzer_off>
			LCD_displayStringRowColumn(1,5,"    ");
     f62:	2f e6       	ldi	r18, 0x6F	; 111
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	65 e0       	ldi	r22, 0x05	; 5
     f6a:	a9 01       	movw	r20, r18
     f6c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>
     f70:	a5 cf       	rjmp	.-182    	; 0xebc <main+0x42>
		}
		else if(dis>5)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	86 30       	cpi	r24, 0x06	; 6
     f78:	91 05       	cpc	r25, r1
     f7a:	98 f0       	brcs	.+38     	; 0xfa2 <main+0x128>
		{
			/* All LEDs ON (Red, Green, Blue), No buzzer.*/
			LED_on(RED);
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			LED_on(GREEN);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			LED_on(BLUE);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
			Buzzer_off();
     f8e:	0e 94 25 07 	call	0xe4a	; 0xe4a <Buzzer_off>
			LCD_displayStringRowColumn(1,5,"    ");
     f92:	2f e6       	ldi	r18, 0x6F	; 111
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	65 e0       	ldi	r22, 0x05	; 5
     f9a:	a9 01       	movw	r20, r18
     f9c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>
     fa0:	8d cf       	rjmp	.-230    	; 0xebc <main+0x42>
		}
		else if (dis<5)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	91 05       	cpc	r25, r1
     faa:	08 f0       	brcs	.+2      	; 0xfae <main+0x134>
     fac:	87 cf       	rjmp	.-242    	; 0xebc <main+0x42>
		{
			/* All LEDs are flashing (Red, Green, Blue), Buzzer sounds, LCD shows "Stop."*/
			LED_all_LEDs_Are_flashing();
     fae:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LED_all_LEDs_Are_flashing>
			Buzzer_on();
     fb2:	0e 94 31 07 	call	0xe62	; 0xe62 <Buzzer_on>
			LCD_displayStringRowColumn(1,5,"STOP");
     fb6:	24 e7       	ldi	r18, 0x74	; 116
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	65 e0       	ldi	r22, 0x05	; 5
     fbe:	a9 01       	movw	r20, r18
     fc0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCD_displayStringRowColumn>
     fc4:	7b cf       	rjmp	.-266    	; 0xebc <main+0x42>

00000fc6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <GPIO_setupPinDirection+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <GPIO_setupPinDirection+0x8>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	6a 83       	std	Y+2, r22	; 0x02
     fd8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	88 30       	cpi	r24, 0x08	; 8
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <GPIO_setupPinDirection+0x1c>
     fe0:	d5 c0       	rjmp	.+426    	; 0x118c <GPIO_setupPinDirection+0x1c6>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	08 f0       	brcs	.+2      	; 0xfea <GPIO_setupPinDirection+0x24>
     fe8:	d1 c0       	rjmp	.+418    	; 0x118c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3d 83       	std	Y+5, r19	; 0x05
     ff2:	2c 83       	std	Y+4, r18	; 0x04
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <GPIO_setupPinDirection+0x3a>
     ffe:	43 c0       	rjmp	.+134    	; 0x1086 <GPIO_setupPinDirection+0xc0>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <GPIO_setupPinDirection+0x4e>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	71 f0       	breq	.+28     	; 0x102e <GPIO_setupPinDirection+0x68>
    1012:	bc c0       	rjmp	.+376    	; 0x118c <GPIO_setupPinDirection+0x1c6>
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <GPIO_setupPinDirection+0x5a>
    101e:	5f c0       	rjmp	.+190    	; 0x10de <GPIO_setupPinDirection+0x118>
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <GPIO_setupPinDirection+0x66>
    102a:	85 c0       	rjmp	.+266    	; 0x1136 <GPIO_setupPinDirection+0x170>
    102c:	af c0       	rjmp	.+350    	; 0x118c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1034:	aa e3       	ldi	r26, 0x3A	; 58
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_setupPinDirection+0x8c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_setupPinDirection+0x88>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	98 c0       	rjmp	.+304    	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    105c:	aa e3       	ldi	r26, 0x3A	; 58
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ea e3       	ldi	r30, 0x3A	; 58
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_setupPinDirection+0xb4>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_setupPinDirection+0xb0>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	83 c0       	rjmp	.+262    	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    108c:	a7 e3       	ldi	r26, 0x37	; 55
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e7 e3       	ldi	r30, 0x37	; 55
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0xe4>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0xe0>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	6c c0       	rjmp	.+216    	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10b4:	a7 e3       	ldi	r26, 0x37	; 55
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0x10c>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0x108>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	57 c0       	rjmp	.+174    	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0x13c>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0x138>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	40 c0       	rjmp	.+128    	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0x164>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0x160>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	2b c0       	rjmp	.+86     	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    113c:	a1 e3       	ldi	r26, 0x31	; 49
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e1 e3       	ldi	r30, 0x31	; 49
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_setupPinDirection+0x194>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_setupPinDirection+0x190>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	14 c0       	rjmp	.+40     	; 0x118c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x1bc>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x1b8>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <GPIO_writePin+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <GPIO_writePin+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6a 83       	std	Y+2, r22	; 0x02
    11ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <GPIO_writePin+0x1c>
    11b6:	d5 c0       	rjmp	.+426    	; 0x1362 <GPIO_writePin+0x1c6>
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <GPIO_writePin+0x24>
    11be:	d1 c0       	rjmp	.+418    	; 0x1362 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3d 83       	std	Y+5, r19	; 0x05
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <GPIO_writePin+0x3a>
    11d4:	43 c0       	rjmp	.+134    	; 0x125c <GPIO_writePin+0xc0>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <GPIO_writePin+0x4e>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	71 f0       	breq	.+28     	; 0x1204 <GPIO_writePin+0x68>
    11e8:	bc c0       	rjmp	.+376    	; 0x1362 <GPIO_writePin+0x1c6>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <GPIO_writePin+0x5a>
    11f4:	5f c0       	rjmp	.+190    	; 0x12b4 <GPIO_writePin+0x118>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_writePin+0x66>
    1200:	85 c0       	rjmp	.+266    	; 0x130c <GPIO_writePin+0x170>
    1202:	af c0       	rjmp	.+350    	; 0x1362 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_writePin+0x8c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_writePin+0x88>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	98 c0       	rjmp	.+304    	; 0x1362 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_writePin+0xb4>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_writePin+0xb0>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	83 c0       	rjmp	.+262    	; 0x1362 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1262:	a8 e3       	ldi	r26, 0x38	; 56
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0xe4>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0xe0>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	6c c0       	rjmp	.+216    	; 0x1362 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0x10c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0x108>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	57 c0       	rjmp	.+174    	; 0x1362 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12ba:	a5 e3       	ldi	r26, 0x35	; 53
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e3       	ldi	r30, 0x35	; 53
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0x13c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0x138>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	40 c0       	rjmp	.+128    	; 0x1362 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0x164>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0x160>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	2b c0       	rjmp	.+86     	; 0x1362 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0x194>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0x190>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0x1bc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0x1b8>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_readPin+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_readPin+0x8>
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1384:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <GPIO_readPin+0x1c>
    138c:	84 c0       	rjmp	.+264    	; 0x1496 <GPIO_readPin+0x124>
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	08 f0       	brcs	.+2      	; 0x1396 <GPIO_readPin+0x24>
    1394:	80 c0       	rjmp	.+256    	; 0x1496 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3d 83       	std	Y+5, r19	; 0x05
    139e:	2c 83       	std	Y+4, r18	; 0x04
    13a0:	4c 81       	ldd	r20, Y+4	; 0x04
    13a2:	5d 81       	ldd	r21, Y+5	; 0x05
    13a4:	41 30       	cpi	r20, 0x01	; 1
    13a6:	51 05       	cpc	r21, r1
    13a8:	79 f1       	breq	.+94     	; 0x1408 <GPIO_readPin+0x96>
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	91 05       	cpc	r25, r1
    13b2:	34 f4       	brge	.+12     	; 0x13c0 <GPIO_readPin+0x4e>
    13b4:	2c 81       	ldd	r18, Y+4	; 0x04
    13b6:	3d 81       	ldd	r19, Y+5	; 0x05
    13b8:	21 15       	cp	r18, r1
    13ba:	31 05       	cpc	r19, r1
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <GPIO_readPin+0x66>
    13be:	6b c0       	rjmp	.+214    	; 0x1496 <GPIO_readPin+0x124>
    13c0:	4c 81       	ldd	r20, Y+4	; 0x04
    13c2:	5d 81       	ldd	r21, Y+5	; 0x05
    13c4:	42 30       	cpi	r20, 0x02	; 2
    13c6:	51 05       	cpc	r21, r1
    13c8:	b9 f1       	breq	.+110    	; 0x1438 <GPIO_readPin+0xc6>
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <GPIO_readPin+0x64>
    13d4:	49 c0       	rjmp	.+146    	; 0x1468 <GPIO_readPin+0xf6>
    13d6:	5f c0       	rjmp	.+190    	; 0x1496 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13d8:	e9 e3       	ldi	r30, 0x39	; 57
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_readPin+0x7e>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_readPin+0x7a>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	88 23       	and	r24, r24
    13fc:	19 f0       	breq	.+6      	; 0x1404 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	49 c0       	rjmp	.+146    	; 0x1496 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1404:	19 82       	std	Y+1, r1	; 0x01
    1406:	47 c0       	rjmp	.+142    	; 0x1496 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1408:	e6 e3       	ldi	r30, 0x36	; 54
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_readPin+0xae>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_readPin+0xaa>
    1424:	ca 01       	movw	r24, r20
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	90 70       	andi	r25, 0x00	; 0
    142a:	88 23       	and	r24, r24
    142c:	19 f0       	breq	.+6      	; 0x1434 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	31 c0       	rjmp	.+98     	; 0x1496 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	2f c0       	rjmp	.+94     	; 0x1496 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1438:	e3 e3       	ldi	r30, 0x33	; 51
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <GPIO_readPin+0xde>
    144c:	55 95       	asr	r21
    144e:	47 95       	ror	r20
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <GPIO_readPin+0xda>
    1454:	ca 01       	movw	r24, r20
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	90 70       	andi	r25, 0x00	; 0
    145a:	88 23       	and	r24, r24
    145c:	19 f0       	breq	.+6      	; 0x1464 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	19 c0       	rjmp	.+50     	; 0x1496 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1464:	19 82       	std	Y+1, r1	; 0x01
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1468:	e0 e3       	ldi	r30, 0x30	; 48
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_readPin+0x10e>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_readPin+0x10a>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	88 23       	and	r24, r24
    148c:	19 f0       	breq	.+6      	; 0x1494 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <GPIO_setupPortDirection+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <GPIO_setupPortDirection+0x8>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	90 f5       	brcc	.+100    	; 0x1522 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3c 83       	std	Y+4, r19	; 0x04
    14c6:	2b 83       	std	Y+3, r18	; 0x03
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	d1 f0       	breq	.+52     	; 0x1506 <GPIO_setupPortDirection+0x5e>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <GPIO_setupPortDirection+0x3e>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	61 f0       	breq	.+24     	; 0x14fc <GPIO_setupPortDirection+0x54>
    14e4:	1e c0       	rjmp	.+60     	; 0x1522 <GPIO_setupPortDirection+0x7a>
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	81 f0       	breq	.+32     	; 0x1510 <GPIO_setupPortDirection+0x68>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	81 f0       	breq	.+32     	; 0x151a <GPIO_setupPortDirection+0x72>
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
    150e:	09 c0       	rjmp	.+18     	; 0x1522 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1510:	e4 e3       	ldi	r30, 0x34	; 52
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	80 83       	st	Z, r24
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    151a:	e1 e3       	ldi	r30, 0x31	; 49
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	80 83       	st	Z, r24
			break;
		}
	}
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <GPIO_writePort+0x6>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <GPIO_writePort+0x8>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	90 f5       	brcc	.+100    	; 0x15aa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3c 83       	std	Y+4, r19	; 0x04
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	d1 f0       	breq	.+52     	; 0x158e <GPIO_writePort+0x5e>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <GPIO_writePort+0x3e>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	61 f0       	breq	.+24     	; 0x1584 <GPIO_writePort+0x54>
    156c:	1e c0       	rjmp	.+60     	; 0x15aa <GPIO_writePort+0x7a>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	81 f0       	breq	.+32     	; 0x1598 <GPIO_writePort+0x68>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <GPIO_writePort+0x72>
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 83       	st	Z, r24
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 83       	st	Z, r24
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	80 83       	st	Z, r24
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <GPIO_readPort+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <GPIO_readPort+0x8>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15c6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	90 f5       	brcc	.+100    	; 0x1632 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3c 83       	std	Y+4, r19	; 0x04
    15d6:	2b 83       	std	Y+3, r18	; 0x03
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	d1 f0       	breq	.+52     	; 0x1616 <GPIO_readPort+0x5e>
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <GPIO_readPort+0x3e>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	61 f0       	breq	.+24     	; 0x160c <GPIO_readPort+0x54>
    15f4:	1e c0       	rjmp	.+60     	; 0x1632 <GPIO_readPort+0x7a>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <GPIO_readPort+0x68>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	81 f0       	breq	.+32     	; 0x162a <GPIO_readPort+0x72>
    160a:	13 c0       	rjmp	.+38     	; 0x1632 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1616:	e6 e3       	ldi	r30, 0x36	; 54
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1620:	e3 e3       	ldi	r30, 0x33	; 51
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    162a:	e0 e3       	ldi	r30, 0x30	; 48
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    166c:	80 91 84 01 	lds	r24, 0x0184
    1670:	90 91 85 01 	lds	r25, 0x0185
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	29 f0       	breq	.+10     	; 0x1682 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1678:	e0 91 84 01 	lds	r30, 0x0184
    167c:	f0 91 85 01 	lds	r31, 0x0185
    1680:	09 95       	icall
	}
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	7f 91       	pop	r23
    1694:	6f 91       	pop	r22
    1696:	5f 91       	pop	r21
    1698:	4f 91       	pop	r20
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <ICU_init+0x6>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	//DDRD &= ~(1<<PD6);
	GPIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	66 e0       	ldi	r22, 0x06	; 6
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	8c e0       	ldi	r24, 0x0C	; 12
    16c6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	98 2f       	mov	r25, r24
    16d4:	98 7f       	andi	r25, 0xF8	; 248
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	80 81       	ld	r24, Z
    16dc:	89 2b       	or	r24, r25
    16de:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	2f 7b       	andi	r18, 0xBF	; 191
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	81 81       	ldd	r24, Z+1	; 0x01
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	00 24       	eor	r0, r0
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	07 94       	ror	r0
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	07 94       	ror	r0
    1706:	98 2f       	mov	r25, r24
    1708:	80 2d       	mov	r24, r0
    170a:	82 2b       	or	r24, r18
    170c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    170e:	ec e4       	ldi	r30, 0x4C	; 76
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	11 82       	std	Z+1, r1	; 0x01
    1714:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1716:	e6 e4       	ldi	r30, 0x46	; 70
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	11 82       	std	Z+1, r1	; 0x01
    171c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    171e:	a9 e5       	ldi	r26, 0x59	; 89
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e9 e5       	ldi	r30, 0x59	; 89
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	8c 93       	st	X, r24
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <ICU_setCallBack+0x6>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	90 93 85 01 	sts	0x0185, r25
    174c:	80 93 84 01 	sts	0x0184, r24
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1766:	ae e4       	ldi	r26, 0x4E	; 78
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ee e4       	ldi	r30, 0x4E	; 78
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	2f 7b       	andi	r18, 0xBF	; 191
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	00 24       	eor	r0, r0
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	07 94       	ror	r0
    1782:	96 95       	lsr	r25
    1784:	87 95       	ror	r24
    1786:	07 94       	ror	r0
    1788:	98 2f       	mov	r25, r24
    178a:	80 2d       	mov	r24, r0
    178c:	82 2b       	or	r24, r18
    178e:	8c 93       	st	X, r24
}
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    17a0:	e6 e4       	ldi	r30, 0x46	; 70
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
}
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    17b6:	ec e4       	ldi	r30, 0x4C	; 76
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	11 82       	std	Z+1, r1	; 0x01
    17bc:	10 82       	st	Z, r1
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    17cc:	ef e4       	ldi	r30, 0x4F	; 79
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	10 82       	st	Z, r1
	TCCR1B = 0;
    17d2:	ee e4       	ldi	r30, 0x4E	; 78
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	10 82       	st	Z, r1
	TCNT1 = 0;
    17d8:	ec e4       	ldi	r30, 0x4C	; 76
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	11 82       	std	Z+1, r1	; 0x01
    17de:	10 82       	st	Z, r1
	ICR1 = 0;
    17e0:	e6 e4       	ldi	r30, 0x46	; 70
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	11 82       	std	Z+1, r1	; 0x01
    17e6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    17e8:	a9 e5       	ldi	r26, 0x59	; 89
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e9 e5       	ldi	r30, 0x59	; 89
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7d       	andi	r24, 0xDF	; 223
    17f4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    17f6:	10 92 85 01 	sts	0x0185, r1
    17fa:	10 92 84 01 	sts	0x0184, r1
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	2e 97       	sbiw	r28, 0x0e	; 14
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 ea       	ldi	r26, 0xA0	; 160
    1832:	b1 e4       	ldi	r27, 0x41	; 65
    1834:	8b 87       	std	Y+11, r24	; 0x0b
    1836:	9c 87       	std	Y+12, r25	; 0x0c
    1838:	ad 87       	std	Y+13, r26	; 0x0d
    183a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6b 85       	ldd	r22, Y+11	; 0x0b
    183e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1840:	8d 85       	ldd	r24, Y+13	; 0x0d
    1842:	9e 85       	ldd	r25, Y+14	; 0x0e
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	55 e4       	ldi	r21, 0x45	; 69
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8f 83       	std	Y+7, r24	; 0x07
    1856:	98 87       	std	Y+8, r25	; 0x08
    1858:	a9 87       	std	Y+9, r26	; 0x09
    185a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185c:	6f 81       	ldd	r22, Y+7	; 0x07
    185e:	78 85       	ldd	r23, Y+8	; 0x08
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <LCD_init+0x7a>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <LCD_init+0xf8>
	else if (__tmp > 65535)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	0f c0       	rjmp	.+30     	; 0x18de <LCD_init+0xda>
    18c0:	80 e9       	ldi	r24, 0x90	; 144
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_init+0xc8>
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <LCD_init+0xbc>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_init+0x104>
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	63 e0       	ldi	r22, 0x03	; 3
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	64 e0       	ldi	r22, 0x04	; 4
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1938:	83 e3       	ldi	r24, 0x33	; 51
    193a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    193e:	82 e3       	ldi	r24, 0x32	; 50
    1940:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1944:	88 e2       	ldi	r24, 0x28	; 40
    1946:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    194a:	8c e0       	ldi	r24, 0x0C	; 12
    194c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
}
    1956:	2e 96       	adiw	r28, 0x0e	; 14
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	c3 56       	subi	r28, 0x63	; 99
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	fe 01       	movw	r30, r28
    1984:	ed 59       	subi	r30, 0x9D	; 157
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    1994:	fe 01       	movw	r30, r28
    1996:	e1 5a       	subi	r30, 0xA1	; 161
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	05 5a       	subi	r16, 0xA5	; 165
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e1 5a       	subi	r30, 0xA1	; 161
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	55 e4       	ldi	r21, 0x45	; 69
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	e5 5a       	subi	r30, 0xA5	; 165
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	44 f4       	brge	.+16     	; 0x1a06 <LCD_sendCommand+0x9e>
		__ticks = 1;
    19f6:	fe 01       	movw	r30, r28
    19f8:	e7 5a       	subi	r30, 0xA7	; 167
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	64 c0       	rjmp	.+200    	; 0x1ace <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a06:	fe 01       	movw	r30, r28
    1a08:	e5 5a       	subi	r30, 0xA5	; 165
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	0c f0       	brlt	.+2      	; 0x1a26 <LCD_sendCommand+0xbe>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	fe 01       	movw	r30, r28
    1a28:	e1 5a       	subi	r30, 0xA1	; 161
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8e 01       	movw	r16, r28
    1a46:	07 5a       	subi	r16, 0xA7	; 167
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	1f c0       	rjmp	.+62     	; 0x1a9c <LCD_sendCommand+0x134>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e9 5a       	subi	r30, 0xA9	; 169
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 e9       	ldi	r24, 0x90	; 144
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e9 5a       	subi	r30, 0xA9	; 169
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_sendCommand+0x10e>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e9 5a       	subi	r30, 0xA9	; 169
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	de 01       	movw	r26, r28
    1a86:	a7 5a       	subi	r26, 0xA7	; 167
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5a       	subi	r30, 0xA7	; 167
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	11 96       	adiw	r26, 0x01	; 1
    1a98:	9c 93       	st	X, r25
    1a9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e7 5a       	subi	r30, 0xA7	; 167
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	d1 f6       	brne	.-76     	; 0x1a5e <LCD_sendCommand+0xf6>
    1aaa:	27 c0       	rjmp	.+78     	; 0x1afa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	8e 01       	movw	r16, r28
    1aae:	07 5a       	subi	r16, 0xA7	; 167
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e5 5a       	subi	r30, 0xA5	; 165
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	de 01       	movw	r26, r28
    1ad0:	ab 5a       	subi	r26, 0xAB	; 171
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5a       	subi	r30, 0xA7	; 167
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	eb 5a       	subi	r30, 0xAB	; 171
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_sendCommand+0x184>
    1af0:	fe 01       	movw	r30, r28
    1af2:	eb 5a       	subi	r30, 0xAB	; 171
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    1b04:	fe 01       	movw	r30, r28
    1b06:	ef 5a       	subi	r30, 0xAF	; 175
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e8       	ldi	r26, 0x80	; 128
    1b10:	bf e3       	ldi	r27, 0x3F	; 63
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	03 5b       	subi	r16, 0xB3	; 179
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	fe 01       	movw	r30, r28
    1b22:	ef 5a       	subi	r30, 0xAF	; 175
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	55 e4       	ldi	r21, 0x45	; 69
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 83       	st	Z, r24
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	a2 83       	std	Z+2, r26	; 0x02
    1b46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e3 5b       	subi	r30, 0xB3	; 179
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	44 f4       	brge	.+16     	; 0x1b76 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1b66:	fe 01       	movw	r30, r28
    1b68:	e5 5b       	subi	r30, 0xB5	; 181
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	64 c0       	rjmp	.+200    	; 0x1c3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1b76:	fe 01       	movw	r30, r28
    1b78:	e3 5b       	subi	r30, 0xB3	; 179
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <LCD_sendCommand+0x22e>
    1b94:	43 c0       	rjmp	.+134    	; 0x1c1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	fe 01       	movw	r30, r28
    1b98:	ef 5a       	subi	r30, 0xAF	; 175
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8e 01       	movw	r16, r28
    1bb6:	05 5b       	subi	r16, 0xB5	; 181
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	80 83       	st	Z, r24
    1bcc:	1f c0       	rjmp	.+62     	; 0x1c0c <LCD_sendCommand+0x2a4>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e7 5b       	subi	r30, 0xB7	; 183
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 e9       	ldi	r24, 0x90	; 144
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 5b       	subi	r30, 0xB7	; 183
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_sendCommand+0x27e>
    1bea:	fe 01       	movw	r30, r28
    1bec:	e7 5b       	subi	r30, 0xB7	; 183
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	de 01       	movw	r26, r28
    1bf6:	a5 5b       	subi	r26, 0xB5	; 181
    1bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e5 5b       	subi	r30, 0xB5	; 181
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	91 81       	ldd	r25, Z+1	; 0x01
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	9c 93       	st	X, r25
    1c0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e5 5b       	subi	r30, 0xB5	; 181
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	d1 f6       	brne	.-76     	; 0x1bce <LCD_sendCommand+0x266>
    1c1a:	27 c0       	rjmp	.+78     	; 0x1c6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	05 5b       	subi	r16, 0xB5	; 181
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	fe 01       	movw	r30, r28
    1c24:	e3 5b       	subi	r30, 0xB3	; 179
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	de 01       	movw	r26, r28
    1c40:	a9 5b       	subi	r26, 0xB9	; 185
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	e5 5b       	subi	r30, 0xB5	; 181
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	8d 93       	st	X+, r24
    1c50:	9c 93       	st	X, r25
    1c52:	fe 01       	movw	r30, r28
    1c54:	e9 5b       	subi	r30, 0xB9	; 185
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_sendCommand+0x2f4>
    1c60:	fe 01       	movw	r30, r28
    1c62:	e9 5b       	subi	r30, 0xB9	; 185
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 59       	subi	r30, 0x9D	; 157
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	80 71       	andi	r24, 0x10	; 16
    1c78:	90 70       	andi	r25, 0x00	; 0
    1c7a:	95 95       	asr	r25
    1c7c:	87 95       	ror	r24
    1c7e:	95 95       	asr	r25
    1c80:	87 95       	ror	r24
    1c82:	95 95       	asr	r25
    1c84:	87 95       	ror	r24
    1c86:	95 95       	asr	r25
    1c88:	87 95       	ror	r24
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	63 e0       	ldi	r22, 0x03	; 3
    1c90:	49 2f       	mov	r20, r25
    1c92:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1c96:	fe 01       	movw	r30, r28
    1c98:	ed 59       	subi	r30, 0x9D	; 157
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	80 72       	andi	r24, 0x20	; 32
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	95 95       	asr	r25
    1ca8:	87 95       	ror	r24
    1caa:	95 95       	asr	r25
    1cac:	87 95       	ror	r24
    1cae:	95 95       	asr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	95 95       	asr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	95 95       	asr	r25
    1cb8:	87 95       	ror	r24
    1cba:	98 2f       	mov	r25, r24
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	49 2f       	mov	r20, r25
    1cc2:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	ed 59       	subi	r30, 0x9D	; 157
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	80 74       	andi	r24, 0x40	; 64
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	08 2e       	mov	r0, r24
    1cd8:	89 2f       	mov	r24, r25
    1cda:	00 0c       	add	r0, r0
    1cdc:	88 1f       	adc	r24, r24
    1cde:	99 0b       	sbc	r25, r25
    1ce0:	00 0c       	add	r0, r0
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	65 e0       	ldi	r22, 0x05	; 5
    1cec:	49 2f       	mov	r20, r25
    1cee:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ed 59       	subi	r30, 0x9D	; 157
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	98 2f       	mov	r25, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	99 27       	eor	r25, r25
    1d00:	99 1f       	adc	r25, r25
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	49 2f       	mov	r20, r25
    1d08:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ed 5b       	subi	r30, 0xBD	; 189
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e8       	ldi	r26, 0x80	; 128
    1d18:	bf e3       	ldi	r27, 0x3F	; 63
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	01 5c       	subi	r16, 0xC1	; 193
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 5b       	subi	r30, 0xBD	; 189
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	55 e4       	ldi	r21, 0x45	; 69
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d50:	fe 01       	movw	r30, r28
    1d52:	ff 96       	adiw	r30, 0x3f	; 63
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e af       	std	Y+62, r25	; 0x3e
    1d72:	8d af       	std	Y+61, r24	; 0x3d
    1d74:	46 c0       	rjmp	.+140    	; 0x1e02 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1d76:	fe 01       	movw	r30, r28
    1d78:	ff 96       	adiw	r30, 0x3f	; 63
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	64 f5       	brge	.+88     	; 0x1dea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	fe 01       	movw	r30, r28
    1d94:	ed 5b       	subi	r30, 0xBD	; 189
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9e af       	std	Y+62, r25	; 0x3e
    1dbe:	8d af       	std	Y+61, r24	; 0x3d
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_sendCommand+0x478>
    1dc2:	80 e9       	ldi	r24, 0x90	; 144
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9c af       	std	Y+60, r25	; 0x3c
    1dc8:	8b af       	std	Y+59, r24	; 0x3b
    1dca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_sendCommand+0x466>
    1dd2:	9c af       	std	Y+60, r25	; 0x3c
    1dd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9e af       	std	Y+62, r25	; 0x3e
    1dde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_sendCommand+0x45a>
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	fe 01       	movw	r30, r28
    1dec:	ff 96       	adiw	r30, 0x3f	; 63
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e af       	std	Y+62, r25	; 0x3e
    1e00:	8d af       	std	Y+61, r24	; 0x3d
    1e02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e06:	9a af       	std	Y+58, r25	; 0x3a
    1e08:	89 af       	std	Y+57, r24	; 0x39
    1e0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_sendCommand+0x4a6>
    1e12:	9a af       	std	Y+58, r25	; 0x3a
    1e14:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e8       	ldi	r26, 0x80	; 128
    1e26:	bf e3       	ldi	r27, 0x3F	; 63
    1e28:	8d ab       	std	Y+53, r24	; 0x35
    1e2a:	9e ab       	std	Y+54, r25	; 0x36
    1e2c:	af ab       	std	Y+55, r26	; 0x37
    1e2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6d a9       	ldd	r22, Y+53	; 0x35
    1e32:	7e a9       	ldd	r23, Y+54	; 0x36
    1e34:	8f a9       	ldd	r24, Y+55	; 0x37
    1e36:	98 ad       	ldd	r25, Y+56	; 0x38
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a e7       	ldi	r20, 0x7A	; 122
    1e3e:	55 e4       	ldi	r21, 0x45	; 69
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	89 ab       	std	Y+49, r24	; 0x31
    1e4a:	9a ab       	std	Y+50, r25	; 0x32
    1e4c:	ab ab       	std	Y+51, r26	; 0x33
    1e4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e50:	69 a9       	ldd	r22, Y+49	; 0x31
    1e52:	7a a9       	ldd	r23, Y+50	; 0x32
    1e54:	8b a9       	ldd	r24, Y+51	; 0x33
    1e56:	9c a9       	ldd	r25, Y+52	; 0x34
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	98 ab       	std	Y+48, r25	; 0x30
    1e6e:	8f a7       	std	Y+47, r24	; 0x2f
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1e72:	69 a9       	ldd	r22, Y+49	; 0x31
    1e74:	7a a9       	ldd	r23, Y+50	; 0x32
    1e76:	8b a9       	ldd	r24, Y+51	; 0x33
    1e78:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e90:	98 ad       	ldd	r25, Y+56	; 0x38
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	98 ab       	std	Y+48, r25	; 0x30
    1eb0:	8f a7       	std	Y+47, r24	; 0x2f
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_sendCommand+0x56a>
    1eb4:	80 e9       	ldi	r24, 0x90	; 144
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	9e a7       	std	Y+46, r25	; 0x2e
    1eba:	8d a7       	std	Y+45, r24	; 0x2d
    1ebc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ebe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_sendCommand+0x558>
    1ec4:	9e a7       	std	Y+46, r25	; 0x2e
    1ec6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	98 ab       	std	Y+48, r25	; 0x30
    1ed0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <LCD_sendCommand+0x54c>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ede:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	98 ab       	std	Y+48, r25	; 0x30
    1eee:	8f a7       	std	Y+47, r24	; 0x2f
    1ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef4:	9c a7       	std	Y+44, r25	; 0x2c
    1ef6:	8b a7       	std	Y+43, r24	; 0x2b
    1ef8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1efa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_sendCommand+0x594>
    1f00:	9c a7       	std	Y+44, r25	; 0x2c
    1f02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	62 e0       	ldi	r22, 0x02	; 2
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e8       	ldi	r26, 0x80	; 128
    1f14:	bf e3       	ldi	r27, 0x3F	; 63
    1f16:	8f a3       	std	Y+39, r24	; 0x27
    1f18:	98 a7       	std	Y+40, r25	; 0x28
    1f1a:	a9 a7       	std	Y+41, r26	; 0x29
    1f1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f20:	78 a5       	ldd	r23, Y+40	; 0x28
    1f22:	89 a5       	ldd	r24, Y+41	; 0x29
    1f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	55 e4       	ldi	r21, 0x45	; 69
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8b a3       	std	Y+35, r24	; 0x23
    1f38:	9c a3       	std	Y+36, r25	; 0x24
    1f3a:	ad a3       	std	Y+37, r26	; 0x25
    1f3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f40:	7c a1       	ldd	r23, Y+36	; 0x24
    1f42:	8d a1       	ldd	r24, Y+37	; 0x25
    1f44:	9e a1       	ldd	r25, Y+38	; 0x26
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9a a3       	std	Y+34, r25	; 0x22
    1f5c:	89 a3       	std	Y+33, r24	; 0x21
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1f60:	6b a1       	ldd	r22, Y+35	; 0x23
    1f62:	7c a1       	ldd	r23, Y+36	; 0x24
    1f64:	8d a1       	ldd	r24, Y+37	; 0x25
    1f66:	9e a1       	ldd	r25, Y+38	; 0x26
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9a a3       	std	Y+34, r25	; 0x22
    1f9e:	89 a3       	std	Y+33, r24	; 0x21
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <LCD_sendCommand+0x658>
    1fa2:	80 e9       	ldi	r24, 0x90	; 144
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	98 a3       	std	Y+32, r25	; 0x20
    1fa8:	8f 8f       	std	Y+31, r24	; 0x1f
    1faa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fac:	98 a1       	ldd	r25, Y+32	; 0x20
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_sendCommand+0x646>
    1fb2:	98 a3       	std	Y+32, r25	; 0x20
    1fb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9a a3       	std	Y+34, r25	; 0x22
    1fbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <LCD_sendCommand+0x63a>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6b a1       	ldd	r22, Y+35	; 0x23
    1fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fce:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9a a3       	std	Y+34, r25	; 0x22
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
    1fde:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe4:	8d 8f       	std	Y+29, r24	; 0x1d
    1fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_sendCommand+0x682>
    1fee:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 59       	subi	r30, 0x9D	; 157
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	91 70       	andi	r25, 0x01	; 1
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	63 e0       	ldi	r22, 0x03	; 3
    2002:	49 2f       	mov	r20, r25
    2004:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2008:	fe 01       	movw	r30, r28
    200a:	ed 59       	subi	r30, 0x9D	; 157
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	82 70       	andi	r24, 0x02	; 2
    2016:	90 70       	andi	r25, 0x00	; 0
    2018:	95 95       	asr	r25
    201a:	87 95       	ror	r24
    201c:	98 2f       	mov	r25, r24
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	64 e0       	ldi	r22, 0x04	; 4
    2022:	49 2f       	mov	r20, r25
    2024:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2028:	fe 01       	movw	r30, r28
    202a:	ed 59       	subi	r30, 0x9D	; 157
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	84 70       	andi	r24, 0x04	; 4
    2036:	90 70       	andi	r25, 0x00	; 0
    2038:	95 95       	asr	r25
    203a:	87 95       	ror	r24
    203c:	95 95       	asr	r25
    203e:	87 95       	ror	r24
    2040:	98 2f       	mov	r25, r24
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	49 2f       	mov	r20, r25
    2048:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    204c:	fe 01       	movw	r30, r28
    204e:	ed 59       	subi	r30, 0x9D	; 157
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	88 70       	andi	r24, 0x08	; 8
    205a:	90 70       	andi	r25, 0x00	; 0
    205c:	95 95       	asr	r25
    205e:	87 95       	ror	r24
    2060:	95 95       	asr	r25
    2062:	87 95       	ror	r24
    2064:	95 95       	asr	r25
    2066:	87 95       	ror	r24
    2068:	98 2f       	mov	r25, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	66 e0       	ldi	r22, 0x06	; 6
    206e:	49 2f       	mov	r20, r25
    2070:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e8       	ldi	r26, 0x80	; 128
    207a:	bf e3       	ldi	r27, 0x3F	; 63
    207c:	89 8f       	std	Y+25, r24	; 0x19
    207e:	9a 8f       	std	Y+26, r25	; 0x1a
    2080:	ab 8f       	std	Y+27, r26	; 0x1b
    2082:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	69 8d       	ldd	r22, Y+25	; 0x19
    2086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	55 e4       	ldi	r21, 0x45	; 69
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8d 8b       	std	Y+21, r24	; 0x15
    209e:	9e 8b       	std	Y+22, r25	; 0x16
    20a0:	af 8b       	std	Y+23, r26	; 0x17
    20a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20a4:	6d 89       	ldd	r22, Y+21	; 0x15
    20a6:	7e 89       	ldd	r23, Y+22	; 0x16
    20a8:	8f 89       	ldd	r24, Y+23	; 0x17
    20aa:	98 8d       	ldd	r25, Y+24	; 0x18
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	69 8d       	ldd	r22, Y+25	; 0x19
    20e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9c 8b       	std	Y+20, r25	; 0x14
    2104:	8b 8b       	std	Y+19, r24	; 0x13
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <LCD_sendCommand+0x7be>
    2108:	80 e9       	ldi	r24, 0x90	; 144
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	9a 8b       	std	Y+18, r25	; 0x12
    210e:	89 8b       	std	Y+17, r24	; 0x11
    2110:	89 89       	ldd	r24, Y+17	; 0x11
    2112:	9a 89       	ldd	r25, Y+18	; 0x12
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_sendCommand+0x7ac>
    2118:	9a 8b       	std	Y+18, r25	; 0x12
    211a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <LCD_sendCommand+0x7a0>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6d 89       	ldd	r22, Y+21	; 0x15
    2132:	7e 89       	ldd	r23, Y+22	; 0x16
    2134:	8f 89       	ldd	r24, Y+23	; 0x17
    2136:	98 8d       	ldd	r25, Y+24	; 0x18
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	98 8b       	std	Y+16, r25	; 0x10
    214a:	8f 87       	std	Y+15, r24	; 0x0f
    214c:	8f 85       	ldd	r24, Y+15	; 0x0f
    214e:	98 89       	ldd	r25, Y+16	; 0x10
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_sendCommand+0x7e8>
    2154:	98 8b       	std	Y+16, r25	; 0x10
    2156:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e8       	ldi	r26, 0x80	; 128
    2168:	bf e3       	ldi	r27, 0x3F	; 63
    216a:	8b 87       	std	Y+11, r24	; 0x0b
    216c:	9c 87       	std	Y+12, r25	; 0x0c
    216e:	ad 87       	std	Y+13, r26	; 0x0d
    2170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	55 e4       	ldi	r21, 0x45	; 69
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 83       	std	Y+7, r24	; 0x07
    218c:	98 87       	std	Y+8, r25	; 0x08
    218e:	a9 87       	std	Y+9, r26	; 0x09
    2190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	3f c0       	rjmp	.+126    	; 0x2232 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	4c f5       	brge	.+82     	; 0x221e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <LCD_sendCommand+0x8ac>
    21f6:	80 e9       	ldi	r24, 0x90	; 144
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_sendCommand+0x89a>
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	69 f7       	brne	.-38     	; 0x21f6 <LCD_sendCommand+0x88e>
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_sendCommand+0x8d6>
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2246:	cd 59       	subi	r28, 0x9D	; 157
    2248:	df 4f       	sbci	r29, 0xFF	; 255
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	c3 56       	subi	r28, 0x63	; 99
    226c:	d0 40       	sbci	r29, 0x00	; 0
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	fe 01       	movw	r30, r28
    227a:	ed 59       	subi	r30, 0x9D	; 157
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    228a:	fe 01       	movw	r30, r28
    228c:	e1 5a       	subi	r30, 0xA1	; 161
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	bf e3       	ldi	r27, 0x3F	; 63
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	8e 01       	movw	r16, r28
    22a2:	05 5a       	subi	r16, 0xA5	; 165
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	fe 01       	movw	r30, r28
    22a8:	e1 5a       	subi	r30, 0xA1	; 161
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	55 e4       	ldi	r21, 0x45	; 69
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	f8 01       	movw	r30, r16
    22c6:	80 83       	st	Z, r24
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	a2 83       	std	Z+2, r26	; 0x02
    22cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ce:	fe 01       	movw	r30, r28
    22d0:	e5 5a       	subi	r30, 0xA5	; 165
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	44 f4       	brge	.+16     	; 0x22fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    22ec:	fe 01       	movw	r30, r28
    22ee:	e7 5a       	subi	r30, 0xA7	; 167
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
    22fa:	64 c0       	rjmp	.+200    	; 0x23c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    22fc:	fe 01       	movw	r30, r28
    22fe:	e5 5a       	subi	r30, 0xA5	; 165
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	0c f0       	brlt	.+2      	; 0x231c <LCD_displayCharacter+0xbe>
    231a:	43 c0       	rjmp	.+134    	; 0x23a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231c:	fe 01       	movw	r30, r28
    231e:	e1 5a       	subi	r30, 0xA1	; 161
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8e 01       	movw	r16, r28
    233c:	07 5a       	subi	r16, 0xA7	; 167
    233e:	1f 4f       	sbci	r17, 0xFF	; 255
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
    2352:	1f c0       	rjmp	.+62     	; 0x2392 <LCD_displayCharacter+0x134>
    2354:	fe 01       	movw	r30, r28
    2356:	e9 5a       	subi	r30, 0xA9	; 169
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 e9       	ldi	r24, 0x90	; 144
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	fe 01       	movw	r30, r28
    2364:	e9 5a       	subi	r30, 0xA9	; 169
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_displayCharacter+0x10e>
    2370:	fe 01       	movw	r30, r28
    2372:	e9 5a       	subi	r30, 0xA9	; 169
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	de 01       	movw	r26, r28
    237c:	a7 5a       	subi	r26, 0xA7	; 167
    237e:	bf 4f       	sbci	r27, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5a       	subi	r30, 0xA7	; 167
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	11 96       	adiw	r26, 0x01	; 1
    238e:	9c 93       	st	X, r25
    2390:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	fe 01       	movw	r30, r28
    2394:	e7 5a       	subi	r30, 0xA7	; 167
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	d1 f6       	brne	.-76     	; 0x2354 <LCD_displayCharacter+0xf6>
    23a0:	27 c0       	rjmp	.+78     	; 0x23f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	8e 01       	movw	r16, r28
    23a4:	07 5a       	subi	r16, 0xA7	; 167
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e5 5a       	subi	r30, 0xA5	; 165
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	de 01       	movw	r26, r28
    23c6:	ab 5a       	subi	r26, 0xAB	; 171
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 5a       	subi	r30, 0xA7	; 167
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	8d 93       	st	X+, r24
    23d6:	9c 93       	st	X, r25
    23d8:	fe 01       	movw	r30, r28
    23da:	eb 5a       	subi	r30, 0xAB	; 171
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_displayCharacter+0x184>
    23e6:	fe 01       	movw	r30, r28
    23e8:	eb 5a       	subi	r30, 0xAB	; 171
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    23fa:	fe 01       	movw	r30, r28
    23fc:	ef 5a       	subi	r30, 0xAF	; 175
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	a2 83       	std	Z+2, r26	; 0x02
    240e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	8e 01       	movw	r16, r28
    2412:	03 5b       	subi	r16, 0xB3	; 179
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	fe 01       	movw	r30, r28
    2418:	ef 5a       	subi	r30, 0xAF	; 175
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4a e7       	ldi	r20, 0x7A	; 122
    242a:	55 e4       	ldi	r21, 0x45	; 69
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	f8 01       	movw	r30, r16
    2436:	80 83       	st	Z, r24
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	a2 83       	std	Z+2, r26	; 0x02
    243c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243e:	fe 01       	movw	r30, r28
    2440:	e3 5b       	subi	r30, 0xB3	; 179
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	44 f4       	brge	.+16     	; 0x246c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    245c:	fe 01       	movw	r30, r28
    245e:	e5 5b       	subi	r30, 0xB5	; 181
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24
    246a:	64 c0       	rjmp	.+200    	; 0x2534 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    246c:	fe 01       	movw	r30, r28
    246e:	e3 5b       	subi	r30, 0xB3	; 179
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	0c f0       	brlt	.+2      	; 0x248c <LCD_displayCharacter+0x22e>
    248a:	43 c0       	rjmp	.+134    	; 0x2512 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248c:	fe 01       	movw	r30, r28
    248e:	ef 5a       	subi	r30, 0xAF	; 175
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e2       	ldi	r20, 0x20	; 32
    24a0:	51 e4       	ldi	r21, 0x41	; 65
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8e 01       	movw	r16, r28
    24ac:	05 5b       	subi	r16, 0xB5	; 181
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	f8 01       	movw	r30, r16
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	1f c0       	rjmp	.+62     	; 0x2502 <LCD_displayCharacter+0x2a4>
    24c4:	fe 01       	movw	r30, r28
    24c6:	e7 5b       	subi	r30, 0xB7	; 183
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 e9       	ldi	r24, 0x90	; 144
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	80 83       	st	Z, r24
    24d2:	fe 01       	movw	r30, r28
    24d4:	e7 5b       	subi	r30, 0xB7	; 183
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_displayCharacter+0x27e>
    24e0:	fe 01       	movw	r30, r28
    24e2:	e7 5b       	subi	r30, 0xB7	; 183
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	de 01       	movw	r26, r28
    24ec:	a5 5b       	subi	r26, 0xB5	; 181
    24ee:	bf 4f       	sbci	r27, 0xFF	; 255
    24f0:	fe 01       	movw	r30, r28
    24f2:	e5 5b       	subi	r30, 0xB5	; 181
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	11 96       	adiw	r26, 0x01	; 1
    24fe:	9c 93       	st	X, r25
    2500:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	fe 01       	movw	r30, r28
    2504:	e5 5b       	subi	r30, 0xB5	; 181
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	d1 f6       	brne	.-76     	; 0x24c4 <LCD_displayCharacter+0x266>
    2510:	27 c0       	rjmp	.+78     	; 0x2560 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	8e 01       	movw	r16, r28
    2514:	05 5b       	subi	r16, 0xB5	; 181
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	e3 5b       	subi	r30, 0xB3	; 179
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	de 01       	movw	r26, r28
    2536:	a9 5b       	subi	r26, 0xB9	; 185
    2538:	bf 4f       	sbci	r27, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	e5 5b       	subi	r30, 0xB5	; 181
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	8d 93       	st	X+, r24
    2546:	9c 93       	st	X, r25
    2548:	fe 01       	movw	r30, r28
    254a:	e9 5b       	subi	r30, 0xB9	; 185
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_displayCharacter+0x2f4>
    2556:	fe 01       	movw	r30, r28
    2558:	e9 5b       	subi	r30, 0xB9	; 185
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2560:	fe 01       	movw	r30, r28
    2562:	ed 59       	subi	r30, 0x9D	; 157
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	80 71       	andi	r24, 0x10	; 16
    256e:	90 70       	andi	r25, 0x00	; 0
    2570:	95 95       	asr	r25
    2572:	87 95       	ror	r24
    2574:	95 95       	asr	r25
    2576:	87 95       	ror	r24
    2578:	95 95       	asr	r25
    257a:	87 95       	ror	r24
    257c:	95 95       	asr	r25
    257e:	87 95       	ror	r24
    2580:	98 2f       	mov	r25, r24
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	63 e0       	ldi	r22, 0x03	; 3
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    258c:	fe 01       	movw	r30, r28
    258e:	ed 59       	subi	r30, 0x9D	; 157
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	80 72       	andi	r24, 0x20	; 32
    259a:	90 70       	andi	r25, 0x00	; 0
    259c:	95 95       	asr	r25
    259e:	87 95       	ror	r24
    25a0:	95 95       	asr	r25
    25a2:	87 95       	ror	r24
    25a4:	95 95       	asr	r25
    25a6:	87 95       	ror	r24
    25a8:	95 95       	asr	r25
    25aa:	87 95       	ror	r24
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	98 2f       	mov	r25, r24
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	64 e0       	ldi	r22, 0x04	; 4
    25b6:	49 2f       	mov	r20, r25
    25b8:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    25bc:	fe 01       	movw	r30, r28
    25be:	ed 59       	subi	r30, 0x9D	; 157
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	80 74       	andi	r24, 0x40	; 64
    25ca:	90 70       	andi	r25, 0x00	; 0
    25cc:	08 2e       	mov	r0, r24
    25ce:	89 2f       	mov	r24, r25
    25d0:	00 0c       	add	r0, r0
    25d2:	88 1f       	adc	r24, r24
    25d4:	99 0b       	sbc	r25, r25
    25d6:	00 0c       	add	r0, r0
    25d8:	88 1f       	adc	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	98 2f       	mov	r25, r24
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	65 e0       	ldi	r22, 0x05	; 5
    25e2:	49 2f       	mov	r20, r25
    25e4:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    25e8:	fe 01       	movw	r30, r28
    25ea:	ed 59       	subi	r30, 0x9D	; 157
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	98 2f       	mov	r25, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	99 27       	eor	r25, r25
    25f6:	99 1f       	adc	r25, r25
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	66 e0       	ldi	r22, 0x06	; 6
    25fc:	49 2f       	mov	r20, r25
    25fe:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2602:	fe 01       	movw	r30, r28
    2604:	ed 5b       	subi	r30, 0xBD	; 189
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e8       	ldi	r26, 0x80	; 128
    260e:	bf e3       	ldi	r27, 0x3F	; 63
    2610:	80 83       	st	Z, r24
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	a2 83       	std	Z+2, r26	; 0x02
    2616:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	8e 01       	movw	r16, r28
    261a:	01 5c       	subi	r16, 0xC1	; 193
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	ed 5b       	subi	r30, 0xBD	; 189
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	55 e4       	ldi	r21, 0x45	; 69
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2646:	fe 01       	movw	r30, r28
    2648:	ff 96       	adiw	r30, 0x3f	; 63
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9e af       	std	Y+62, r25	; 0x3e
    2668:	8d af       	std	Y+61, r24	; 0x3d
    266a:	46 c0       	rjmp	.+140    	; 0x26f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    266c:	fe 01       	movw	r30, r28
    266e:	ff 96       	adiw	r30, 0x3f	; 63
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	64 f5       	brge	.+88     	; 0x26e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	fe 01       	movw	r30, r28
    268a:	ed 5b       	subi	r30, 0xBD	; 189
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e af       	std	Y+62, r25	; 0x3e
    26b4:	8d af       	std	Y+61, r24	; 0x3d
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_displayCharacter+0x478>
    26b8:	80 e9       	ldi	r24, 0x90	; 144
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	9c af       	std	Y+60, r25	; 0x3c
    26be:	8b af       	std	Y+59, r24	; 0x3b
    26c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayCharacter+0x466>
    26c8:	9c af       	std	Y+60, r25	; 0x3c
    26ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e af       	std	Y+62, r25	; 0x3e
    26d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_displayCharacter+0x45a>
    26de:	16 c0       	rjmp	.+44     	; 0x270c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	fe 01       	movw	r30, r28
    26e2:	ff 96       	adiw	r30, 0x3f	; 63
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e af       	std	Y+62, r25	; 0x3e
    26f6:	8d af       	std	Y+61, r24	; 0x3d
    26f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    26fc:	9a af       	std	Y+58, r25	; 0x3a
    26fe:	89 af       	std	Y+57, r24	; 0x39
    2700:	89 ad       	ldd	r24, Y+57	; 0x39
    2702:	9a ad       	ldd	r25, Y+58	; 0x3a
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_displayCharacter+0x4a6>
    2708:	9a af       	std	Y+58, r25	; 0x3a
    270a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e8       	ldi	r26, 0x80	; 128
    271c:	bf e3       	ldi	r27, 0x3F	; 63
    271e:	8d ab       	std	Y+53, r24	; 0x35
    2720:	9e ab       	std	Y+54, r25	; 0x36
    2722:	af ab       	std	Y+55, r26	; 0x37
    2724:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6d a9       	ldd	r22, Y+53	; 0x35
    2728:	7e a9       	ldd	r23, Y+54	; 0x36
    272a:	8f a9       	ldd	r24, Y+55	; 0x37
    272c:	98 ad       	ldd	r25, Y+56	; 0x38
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	55 e4       	ldi	r21, 0x45	; 69
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	89 ab       	std	Y+49, r24	; 0x31
    2740:	9a ab       	std	Y+50, r25	; 0x32
    2742:	ab ab       	std	Y+51, r26	; 0x33
    2744:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2746:	69 a9       	ldd	r22, Y+49	; 0x31
    2748:	7a a9       	ldd	r23, Y+50	; 0x32
    274a:	8b a9       	ldd	r24, Y+51	; 0x33
    274c:	9c a9       	ldd	r25, Y+52	; 0x34
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	98 ab       	std	Y+48, r25	; 0x30
    2764:	8f a7       	std	Y+47, r24	; 0x2f
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2768:	69 a9       	ldd	r22, Y+49	; 0x31
    276a:	7a a9       	ldd	r23, Y+50	; 0x32
    276c:	8b a9       	ldd	r24, Y+51	; 0x33
    276e:	9c a9       	ldd	r25, Y+52	; 0x34
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6d a9       	ldd	r22, Y+53	; 0x35
    2782:	7e a9       	ldd	r23, Y+54	; 0x36
    2784:	8f a9       	ldd	r24, Y+55	; 0x37
    2786:	98 ad       	ldd	r25, Y+56	; 0x38
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <LCD_displayCharacter+0x56a>
    27aa:	80 e9       	ldi	r24, 0x90	; 144
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9e a7       	std	Y+46, r25	; 0x2e
    27b0:	8d a7       	std	Y+45, r24	; 0x2d
    27b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_displayCharacter+0x558>
    27ba:	9e a7       	std	Y+46, r25	; 0x2e
    27bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c0:	98 a9       	ldd	r25, Y+48	; 0x30
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	98 ab       	std	Y+48, r25	; 0x30
    27c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ca:	98 a9       	ldd	r25, Y+48	; 0x30
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <LCD_displayCharacter+0x54c>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	69 a9       	ldd	r22, Y+49	; 0x31
    27d4:	7a a9       	ldd	r23, Y+50	; 0x32
    27d6:	8b a9       	ldd	r24, Y+51	; 0x33
    27d8:	9c a9       	ldd	r25, Y+52	; 0x34
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	98 ab       	std	Y+48, r25	; 0x30
    27e4:	8f a7       	std	Y+47, r24	; 0x2f
    27e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ea:	9c a7       	std	Y+44, r25	; 0x2c
    27ec:	8b a7       	std	Y+43, r24	; 0x2b
    27ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_displayCharacter+0x594>
    27f6:	9c a7       	std	Y+44, r25	; 0x2c
    27f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	62 e0       	ldi	r22, 0x02	; 2
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e8       	ldi	r26, 0x80	; 128
    280a:	bf e3       	ldi	r27, 0x3F	; 63
    280c:	8f a3       	std	Y+39, r24	; 0x27
    280e:	98 a7       	std	Y+40, r25	; 0x28
    2810:	a9 a7       	std	Y+41, r26	; 0x29
    2812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6f a1       	ldd	r22, Y+39	; 0x27
    2816:	78 a5       	ldd	r23, Y+40	; 0x28
    2818:	89 a5       	ldd	r24, Y+41	; 0x29
    281a:	9a a5       	ldd	r25, Y+42	; 0x2a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a e7       	ldi	r20, 0x7A	; 122
    2822:	55 e4       	ldi	r21, 0x45	; 69
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8b a3       	std	Y+35, r24	; 0x23
    282e:	9c a3       	std	Y+36, r25	; 0x24
    2830:	ad a3       	std	Y+37, r26	; 0x25
    2832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2834:	6b a1       	ldd	r22, Y+35	; 0x23
    2836:	7c a1       	ldd	r23, Y+36	; 0x24
    2838:	8d a1       	ldd	r24, Y+37	; 0x25
    283a:	9e a1       	ldd	r25, Y+38	; 0x26
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9a a3       	std	Y+34, r25	; 0x22
    2852:	89 a3       	std	Y+33, r24	; 0x21
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2856:	6b a1       	ldd	r22, Y+35	; 0x23
    2858:	7c a1       	ldd	r23, Y+36	; 0x24
    285a:	8d a1       	ldd	r24, Y+37	; 0x25
    285c:	9e a1       	ldd	r25, Y+38	; 0x26
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6f a1       	ldd	r22, Y+39	; 0x27
    2870:	78 a5       	ldd	r23, Y+40	; 0x28
    2872:	89 a5       	ldd	r24, Y+41	; 0x29
    2874:	9a a5       	ldd	r25, Y+42	; 0x2a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9a a3       	std	Y+34, r25	; 0x22
    2894:	89 a3       	std	Y+33, r24	; 0x21
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <LCD_displayCharacter+0x658>
    2898:	80 e9       	ldi	r24, 0x90	; 144
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	98 a3       	std	Y+32, r25	; 0x20
    289e:	8f 8f       	std	Y+31, r24	; 0x1f
    28a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a2:	98 a1       	ldd	r25, Y+32	; 0x20
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_displayCharacter+0x646>
    28a8:	98 a3       	std	Y+32, r25	; 0x20
    28aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	89 a1       	ldd	r24, Y+33	; 0x21
    28ae:	9a a1       	ldd	r25, Y+34	; 0x22
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9a a3       	std	Y+34, r25	; 0x22
    28b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	89 a1       	ldd	r24, Y+33	; 0x21
    28b8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <LCD_displayCharacter+0x63a>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	6b a1       	ldd	r22, Y+35	; 0x23
    28c2:	7c a1       	ldd	r23, Y+36	; 0x24
    28c4:	8d a1       	ldd	r24, Y+37	; 0x25
    28c6:	9e a1       	ldd	r25, Y+38	; 0x26
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	9e 8f       	std	Y+30, r25	; 0x1e
    28da:	8d 8f       	std	Y+29, r24	; 0x1d
    28dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_displayCharacter+0x682>
    28e4:	9e 8f       	std	Y+30, r25	; 0x1e
    28e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 59       	subi	r30, 0x9D	; 157
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	98 2f       	mov	r25, r24
    28f2:	91 70       	andi	r25, 0x01	; 1
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	63 e0       	ldi	r22, 0x03	; 3
    28f8:	49 2f       	mov	r20, r25
    28fa:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    28fe:	fe 01       	movw	r30, r28
    2900:	ed 59       	subi	r30, 0x9D	; 157
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	82 70       	andi	r24, 0x02	; 2
    290c:	90 70       	andi	r25, 0x00	; 0
    290e:	95 95       	asr	r25
    2910:	87 95       	ror	r24
    2912:	98 2f       	mov	r25, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	64 e0       	ldi	r22, 0x04	; 4
    2918:	49 2f       	mov	r20, r25
    291a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    291e:	fe 01       	movw	r30, r28
    2920:	ed 59       	subi	r30, 0x9D	; 157
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	84 70       	andi	r24, 0x04	; 4
    292c:	90 70       	andi	r25, 0x00	; 0
    292e:	95 95       	asr	r25
    2930:	87 95       	ror	r24
    2932:	95 95       	asr	r25
    2934:	87 95       	ror	r24
    2936:	98 2f       	mov	r25, r24
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	65 e0       	ldi	r22, 0x05	; 5
    293c:	49 2f       	mov	r20, r25
    293e:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2942:	fe 01       	movw	r30, r28
    2944:	ed 59       	subi	r30, 0x9D	; 157
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	88 70       	andi	r24, 0x08	; 8
    2950:	90 70       	andi	r25, 0x00	; 0
    2952:	95 95       	asr	r25
    2954:	87 95       	ror	r24
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	95 95       	asr	r25
    295c:	87 95       	ror	r24
    295e:	98 2f       	mov	r25, r24
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	66 e0       	ldi	r22, 0x06	; 6
    2964:	49 2f       	mov	r20, r25
    2966:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a0 e8       	ldi	r26, 0x80	; 128
    2970:	bf e3       	ldi	r27, 0x3F	; 63
    2972:	89 8f       	std	Y+25, r24	; 0x19
    2974:	9a 8f       	std	Y+26, r25	; 0x1a
    2976:	ab 8f       	std	Y+27, r26	; 0x1b
    2978:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	69 8d       	ldd	r22, Y+25	; 0x19
    297c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a e7       	ldi	r20, 0x7A	; 122
    2988:	55 e4       	ldi	r21, 0x45	; 69
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8d 8b       	std	Y+21, r24	; 0x15
    2994:	9e 8b       	std	Y+22, r25	; 0x16
    2996:	af 8b       	std	Y+23, r26	; 0x17
    2998:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299a:	6d 89       	ldd	r22, Y+21	; 0x15
    299c:	7e 89       	ldd	r23, Y+22	; 0x16
    299e:	8f 89       	ldd	r24, Y+23	; 0x17
    29a0:	98 8d       	ldd	r25, Y+24	; 0x18
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	2c f4       	brge	.+10     	; 0x29bc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    29bc:	6d 89       	ldd	r22, Y+21	; 0x15
    29be:	7e 89       	ldd	r23, Y+22	; 0x16
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	98 8d       	ldd	r25, Y+24	; 0x18
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	4c f5       	brge	.+82     	; 0x2a26 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	69 8d       	ldd	r22, Y+25	; 0x19
    29d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e2       	ldi	r20, 0x20	; 32
    29e2:	51 e4       	ldi	r21, 0x41	; 65
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <LCD_displayCharacter+0x7be>
    29fe:	80 e9       	ldi	r24, 0x90	; 144
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	9a 8b       	std	Y+18, r25	; 0x12
    2a04:	89 8b       	std	Y+17, r24	; 0x11
    2a06:	89 89       	ldd	r24, Y+17	; 0x11
    2a08:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <LCD_displayCharacter+0x7ac>
    2a0e:	9a 8b       	std	Y+18, r25	; 0x12
    2a10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	69 f7       	brne	.-38     	; 0x29fe <LCD_displayCharacter+0x7a0>
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	6d 89       	ldd	r22, Y+21	; 0x15
    2a28:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9c 8b       	std	Y+20, r25	; 0x14
    2a38:	8b 8b       	std	Y+19, r24	; 0x13
    2a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3e:	98 8b       	std	Y+16, r25	; 0x10
    2a40:	8f 87       	std	Y+15, r24	; 0x0f
    2a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a44:	98 89       	ldd	r25, Y+16	; 0x10
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_displayCharacter+0x7e8>
    2a4a:	98 8b       	std	Y+16, r25	; 0x10
    2a4c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	62 e0       	ldi	r22, 0x02	; 2
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e8       	ldi	r26, 0x80	; 128
    2a5e:	bf e3       	ldi	r27, 0x3F	; 63
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	9c 87       	std	Y+12, r25	; 0x0c
    2a64:	ad 87       	std	Y+13, r26	; 0x0d
    2a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	55 e4       	ldi	r21, 0x45	; 69
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f 83       	std	Y+7, r24	; 0x07
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	a9 87       	std	Y+9, r26	; 0x09
    2a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	4c f5       	brge	.+82     	; 0x2b14 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <LCD_displayCharacter+0x8ac>
    2aec:	80 e9       	ldi	r24, 0x90	; 144
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_displayCharacter+0x89a>
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <LCD_displayCharacter+0x88e>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_displayCharacter+0x8d6>
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b3c:	cd 59       	subi	r28, 0x9D	; 157
    2b3e:	df 4f       	sbci	r29, 0xFF	; 255
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	08 95       	ret

00002b54 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <LCD_displayString+0x6>
    2b5a:	0f 92       	push	r0
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	9b 83       	std	Y+3, r25	; 0x03
    2b62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b64:	19 82       	std	Y+1, r1	; 0x01
    2b66:	0e c0       	rjmp	.+28     	; 0x2b84 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	fc 01       	movw	r30, r24
    2b74:	e2 0f       	add	r30, r18
    2b76:	f3 1f       	adc	r31, r19
    2b78:	80 81       	ld	r24, Z
    2b7a:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_displayCharacter>
		i++;
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8e:	fc 01       	movw	r30, r24
    2b90:	e2 0f       	add	r30, r18
    2b92:	f3 1f       	adc	r31, r19
    2b94:	80 81       	ld	r24, Z
    2b96:	88 23       	and	r24, r24
    2b98:	39 f7       	brne	.-50     	; 0x2b68 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <LCD_moveCursor+0x6>
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <LCD_moveCursor+0x8>
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
    2bb6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	3d 83       	std	Y+5, r19	; 0x05
    2bc0:	2c 83       	std	Y+4, r18	; 0x04
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	91 05       	cpc	r25, r1
    2bca:	c1 f0       	breq	.+48     	; 0x2bfc <LCD_moveCursor+0x56>
    2bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bce:	3d 81       	ldd	r19, Y+5	; 0x05
    2bd0:	22 30       	cpi	r18, 0x02	; 2
    2bd2:	31 05       	cpc	r19, r1
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <LCD_moveCursor+0x3a>
    2bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	61 f0       	breq	.+24     	; 0x2bf6 <LCD_moveCursor+0x50>
    2bde:	19 c0       	rjmp	.+50     	; 0x2c12 <LCD_moveCursor+0x6c>
    2be0:	2c 81       	ldd	r18, Y+4	; 0x04
    2be2:	3d 81       	ldd	r19, Y+5	; 0x05
    2be4:	22 30       	cpi	r18, 0x02	; 2
    2be6:	31 05       	cpc	r19, r1
    2be8:	69 f0       	breq	.+26     	; 0x2c04 <LCD_moveCursor+0x5e>
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	9d 81       	ldd	r25, Y+5	; 0x05
    2bee:	83 30       	cpi	r24, 0x03	; 3
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	61 f0       	breq	.+24     	; 0x2c0c <LCD_moveCursor+0x66>
    2bf4:	0e c0       	rjmp	.+28     	; 0x2c12 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	0b c0       	rjmp	.+22     	; 0x2c12 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	80 5c       	subi	r24, 0xC0	; 192
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	80 5f       	subi	r24, 0xF0	; 240
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	03 c0       	rjmp	.+6      	; 0x2c12 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	80 5b       	subi	r24, 0xB0	; 176
    2c10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	80 68       	ori	r24, 0x80	; 128
    2c16:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <LCD_displayStringRowColumn+0x6>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <LCD_displayStringRowColumn+0x8>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	6a 83       	std	Y+2, r22	; 0x02
    2c3a:	5c 83       	std	Y+4, r21	; 0x04
    2c3c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	6a 81       	ldd	r22, Y+2	; 0x02
    2c42:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	62 97       	sbiw	r28, 0x12	; 18
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	9a 8b       	std	Y+18, r25	; 0x12
    2c72:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c74:	89 89       	ldd	r24, Y+17	; 0x11
    2c76:	9a 89       	ldd	r25, Y+18	; 0x12
    2c78:	9e 01       	movw	r18, r28
    2c7a:	2f 5f       	subi	r18, 0xFF	; 255
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	b9 01       	movw	r22, r18
    2c80:	4a e0       	ldi	r20, 0x0A	; 10
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	0e 94 84 19 	call	0x3308	; 0x3308 <itoa>
   LCD_displayString(buff); /* Display the string */
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
}
    2c90:	62 96       	adiw	r28, 0x12	; 18
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_sendCommand>
}
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <LEDS_init>:
#include"std_types.h"
#include "util/delay.h"

/*Initializes all Leds (red, green, blue) pins direction.Turn off all the Leds */
void LEDS_init(void)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	/*Initializes all Leds (red, green, blue) pins direction. */
	GPIO_setupPinDirection(RED_LED_PORT_ID, RED_LED_PIN_ID, PIN_OUTPUT);
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, PIN_OUTPUT);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	61 e0       	ldi	r22, 0x01	; 1
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, PIN_OUTPUT);
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	62 e0       	ldi	r22, 0x02	; 2
    2cd6:	41 e0       	ldi	r20, 0x01	; 1
    2cd8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	/*Turn off all the Leds*/
#ifdef POSITVE_LOGIC
	GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    2cdc:	82 e0       	ldi	r24, 0x02	; 2
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	40 e0       	ldi	r20, 0x00	; 0
    2ce2:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_LOW);
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	62 e0       	ldi	r22, 0x02	; 2
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
#elif NEGATIVE_LOGIC
	GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_HIGH);
	GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_HIGH);
	GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_HIGH);
#endif
}
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <LED_on>:

/*Turns on the specified LED.*/
void LED_on(LED_ID id)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <LED_on+0x6>
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
#ifdef POSITVE_LOGIC
	switch(id)
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	3b 83       	std	Y+3, r19	; 0x03
    2d16:	2a 83       	std	Y+2, r18	; 0x02
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	91 05       	cpc	r25, r1
    2d20:	79 f0       	breq	.+30     	; 0x2d40 <LED_on+0x40>
    2d22:	2a 81       	ldd	r18, Y+2	; 0x02
    2d24:	3b 81       	ldd	r19, Y+3	; 0x03
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	81 f0       	breq	.+32     	; 0x2d4c <LED_on+0x4c>
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	89 f4       	brne	.+34     	; 0x2d56 <LED_on+0x56>
	{
	case RED:
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_HIGH);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2d3e:	0b c0       	rjmp	.+22     	; 0x2d56 <LED_on+0x56>
		break;
	case GREEN:
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_HIGH);
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <LED_on+0x56>
		break;
	case BLUE:
		GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_HIGH);
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	62 e0       	ldi	r22, 0x02	; 2
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
			case BLUE:
				GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_LOW);
				break;
			}
#endif
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <LED_off>:

/*Turns off the specified LED.*/
void LED_off(LED_ID id)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <LED_off+0x6>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	89 83       	std	Y+1, r24	; 0x01
#ifdef POSITVE_LOGIC
	switch(id)
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	3b 83       	std	Y+3, r19	; 0x03
    2d78:	2a 83       	std	Y+2, r18	; 0x02
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	91 05       	cpc	r25, r1
    2d82:	79 f0       	breq	.+30     	; 0x2da2 <LED_off+0x40>
    2d84:	2a 81       	ldd	r18, Y+2	; 0x02
    2d86:	3b 81       	ldd	r19, Y+3	; 0x03
    2d88:	22 30       	cpi	r18, 0x02	; 2
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	81 f0       	breq	.+32     	; 0x2dae <LED_off+0x4c>
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	9b 81       	ldd	r25, Y+3	; 0x03
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	89 f4       	brne	.+34     	; 0x2db8 <LED_off+0x56>
		{
		case RED:
			GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2da0:	0b c0       	rjmp	.+22     	; 0x2db8 <LED_off+0x56>
			break;
		case GREEN:
			GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    2dac:	05 c0       	rjmp	.+10     	; 0x2db8 <LED_off+0x56>
			break;
		case BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_LOW);
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	62 e0       	ldi	r22, 0x02	; 2
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
			break;
		case BLUE:
			GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, LOGIC_HIGH);
			break;
#endif
}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <LED_all_Are_ON>:
void LED_all_Are_ON(void)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
	LED_on(RED);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
	LED_on(GREEN);
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
	LED_on(BLUE);
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LED_on>
}
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LED_all_Are_OFF>:
void LED_all_Are_OFF(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	LED_off(RED);
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
	LED_off(GREEN);
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
	LED_off(BLUE);
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <LED_off>
}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <LED_all_LEDs_Are_flashing>:
void LED_all_LEDs_Are_flashing(void)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
	LED_all_Are_ON();
    2e18:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LED_all_Are_ON>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	aa e7       	ldi	r26, 0x7A	; 122
    2e22:	b4 e4       	ldi	r27, 0x44	; 68
    2e24:	89 8f       	std	Y+25, r24	; 0x19
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8d 8b       	std	Y+21, r24	; 0x15
    2e46:	9e 8b       	std	Y+22, r25	; 0x16
    2e48:	af 8b       	std	Y+23, r26	; 0x17
    2e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LED_all_LEDs_Are_flashing+0x6a>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LED_all_LEDs_Are_flashing+0xe8>
	else if (__tmp > 65535)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LED_all_LEDs_Are_flashing+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	69 8d       	ldd	r22, Y+25	; 0x19
    2e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LED_all_LEDs_Are_flashing+0xca>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LED_all_LEDs_Are_flashing+0xb8>
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LED_all_LEDs_Are_flashing+0xac>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LED_all_LEDs_Are_flashing+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eda:	7e 89       	ldd	r23, Y+22	; 0x16
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	98 89       	ldd	r25, Y+16	; 0x10
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LED_all_LEDs_Are_flashing+0xf4>
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LED_all_Are_OFF();
    2f00:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LED_all_Are_OFF>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	aa e7       	ldi	r26, 0x7A	; 122
    2f0a:	b4 e4       	ldi	r27, 0x44	; 68
    2f0c:	8b 87       	std	Y+11, r24	; 0x0b
    2f0e:	9c 87       	std	Y+12, r25	; 0x0c
    2f10:	ad 87       	std	Y+13, r26	; 0x0d
    2f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a e7       	ldi	r20, 0x7A	; 122
    2f22:	55 e4       	ldi	r21, 0x45	; 69
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	8f 83       	std	Y+7, r24	; 0x07
    2f2e:	98 87       	std	Y+8, r25	; 0x08
    2f30:	a9 87       	std	Y+9, r26	; 0x09
    2f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	2c f4       	brge	.+10     	; 0x2f56 <LED_all_LEDs_Are_flashing+0x152>
		__ticks = 1;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	3f c0       	rjmp	.+126    	; 0x2fd4 <LED_all_LEDs_Are_flashing+0x1d0>
	else if (__tmp > 65535)
    2f56:	6f 81       	ldd	r22, Y+7	; 0x07
    2f58:	78 85       	ldd	r23, Y+8	; 0x08
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	4c f5       	brge	.+82     	; 0x2fc0 <LED_all_LEDs_Are_flashing+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e2       	ldi	r20, 0x20	; 32
    2f7c:	51 e4       	ldi	r21, 0x41	; 65
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <LED_all_LEDs_Are_flashing+0x1b2>
    2f98:	80 e9       	ldi	r24, 0x90	; 144
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	9c 83       	std	Y+4, r25	; 0x04
    2f9e:	8b 83       	std	Y+3, r24	; 0x03
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LED_all_LEDs_Are_flashing+0x1a0>
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	69 f7       	brne	.-38     	; 0x2f98 <LED_all_LEDs_Are_flashing+0x194>
    2fbe:	14 c0       	rjmp	.+40     	; 0x2fe8 <LED_all_LEDs_Are_flashing+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc2:	78 85       	ldd	r23, Y+8	; 0x08
    2fc4:	89 85       	ldd	r24, Y+9	; 0x09
    2fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	9a 83       	std	Y+2, r25	; 0x02
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LED_all_LEDs_Are_flashing+0x1dc>
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2fe8:	6c 96       	adiw	r28, 0x1c	; 28
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <Ultrasonic_init>:
uint32 recieve_time=0;
uint16 distance=0;
ICU_ConfigType ICU_Configrution={F_CPU_8,RAISING};
/***********************************************************/
void Ultrasonic_init(void)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	/*Initialize the ICU driver as required.*/
	ICU_init(&ICU_Configrution);
    3002:	81 e8       	ldi	r24, 0x81	; 129
    3004:	91 e0       	ldi	r25, 0x01	; 1
    3006:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <ICU_init>
	/*Set up the ICU callback function.*/
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    300a:	80 e2       	ldi	r24, 0x20	; 32
    300c:	99 e1       	ldi	r25, 0x19	; 25
    300e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <ICU_setCallBack>
	/*Set the direction for the trigger pin as output through the GPIO driver.*/
	GPIO_setupPinDirection(ULTRASONIC_TR_PORT_ID,ULTRASONIC_TR_PIN_ID,PIN_OUTPUT);
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	67 e0       	ldi	r22, 0x07	; 7
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ULTRASONIC_ECHO_PORT_ID,ULTRASONIC_ECHO_PIN_ID,PIN_INPUT);
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	66 e0       	ldi	r22, 0x06	; 6
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GPIO_setupPinDirection>

}
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	68 97       	sbiw	r28, 0x18	; 24
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
	/*Send the trigger pulse to the ultrasonic sensor.*/
	GPIO_writePin(ULTRASONIC_TR_PORT_ID,ULTRASONIC_TR_PIN_ID,LOGIC_HIGH);
    3040:	83 e0       	ldi	r24, 0x03	; 3
    3042:	67 e0       	ldi	r22, 0x07	; 7
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 ea       	ldi	r26, 0xA0	; 160
    3050:	b1 e4       	ldi	r27, 0x41	; 65
    3052:	8d 8b       	std	Y+21, r24	; 0x15
    3054:	9e 8b       	std	Y+22, r25	; 0x16
    3056:	af 8b       	std	Y+23, r26	; 0x17
    3058:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    305a:	6d 89       	ldd	r22, Y+21	; 0x15
    305c:	7e 89       	ldd	r23, Y+22	; 0x16
    305e:	8f 89       	ldd	r24, Y+23	; 0x17
    3060:	98 8d       	ldd	r25, Y+24	; 0x18
    3062:	2b ea       	ldi	r18, 0xAB	; 171
    3064:	3a ea       	ldi	r19, 0xAA	; 170
    3066:	4a ea       	ldi	r20, 0xAA	; 170
    3068:	50 e4       	ldi	r21, 0x40	; 64
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	89 8b       	std	Y+17, r24	; 0x11
    3074:	9a 8b       	std	Y+18, r25	; 0x12
    3076:	ab 8b       	std	Y+19, r26	; 0x13
    3078:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    307a:	69 89       	ldd	r22, Y+17	; 0x11
    307c:	7a 89       	ldd	r23, Y+18	; 0x12
    307e:	8b 89       	ldd	r24, Y+19	; 0x13
    3080:	9c 89       	ldd	r25, Y+20	; 0x14
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	5f e3       	ldi	r21, 0x3F	; 63
    308a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308e:	88 23       	and	r24, r24
    3090:	1c f4       	brge	.+6      	; 0x3098 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	88 8b       	std	Y+16, r24	; 0x10
    3096:	91 c0       	rjmp	.+290    	; 0x31ba <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3098:	69 89       	ldd	r22, Y+17	; 0x11
    309a:	7a 89       	ldd	r23, Y+18	; 0x12
    309c:	8b 89       	ldd	r24, Y+19	; 0x13
    309e:	9c 89       	ldd	r25, Y+20	; 0x14
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	53 e4       	ldi	r21, 0x43	; 67
    30a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	0c f0       	brlt	.+2      	; 0x30b2 <Ultrasonic_Trigger+0x86>
    30b0:	7b c0       	rjmp	.+246    	; 0x31a8 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    30b2:	6d 89       	ldd	r22, Y+21	; 0x15
    30b4:	7e 89       	ldd	r23, Y+22	; 0x16
    30b6:	8f 89       	ldd	r24, Y+23	; 0x17
    30b8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4a e7       	ldi	r20, 0x7A	; 122
    30c0:	54 e4       	ldi	r21, 0x44	; 68
    30c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	8c 87       	std	Y+12, r24	; 0x0c
    30cc:	9d 87       	std	Y+13, r25	; 0x0d
    30ce:	ae 87       	std	Y+14, r26	; 0x0e
    30d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    30d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    30d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a e7       	ldi	r20, 0x7A	; 122
    30e0:	55 e4       	ldi	r21, 0x45	; 69
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	88 87       	std	Y+8, r24	; 0x08
    30ec:	99 87       	std	Y+9, r25	; 0x09
    30ee:	aa 87       	std	Y+10, r26	; 0x0a
    30f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30f2:	68 85       	ldd	r22, Y+8	; 0x08
    30f4:	79 85       	ldd	r23, Y+9	; 0x09
    30f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9f 83       	std	Y+7, r25	; 0x07
    3110:	8e 83       	std	Y+6, r24	; 0x06
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    3114:	68 85       	ldd	r22, Y+8	; 0x08
    3116:	79 85       	ldd	r23, Y+9	; 0x09
    3118:	8a 85       	ldd	r24, Y+10	; 0x0a
    311a:	9b 85       	ldd	r25, Y+11	; 0x0b
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6c 85       	ldd	r22, Y+12	; 0x0c
    312e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3130:	8e 85       	ldd	r24, Y+14	; 0x0e
    3132:	9f 85       	ldd	r25, Y+15	; 0x0f
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9f 83       	std	Y+7, r25	; 0x07
    3152:	8e 83       	std	Y+6, r24	; 0x06
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <Ultrasonic_Trigger+0x148>
    3156:	80 e9       	ldi	r24, 0x90	; 144
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	9d 83       	std	Y+5, r25	; 0x05
    315c:	8c 83       	std	Y+4, r24	; 0x04
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	9d 81       	ldd	r25, Y+5	; 0x05
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <Ultrasonic_Trigger+0x136>
    3166:	9d 83       	std	Y+5, r25	; 0x05
    3168:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8e 81       	ldd	r24, Y+6	; 0x06
    316c:	9f 81       	ldd	r25, Y+7	; 0x07
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9f 83       	std	Y+7, r25	; 0x07
    3172:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8e 81       	ldd	r24, Y+6	; 0x06
    3176:	9f 81       	ldd	r25, Y+7	; 0x07
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <Ultrasonic_Trigger+0x12a>
    317c:	24 c0       	rjmp	.+72     	; 0x31c6 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	68 85       	ldd	r22, Y+8	; 0x08
    3180:	79 85       	ldd	r23, Y+9	; 0x09
    3182:	8a 85       	ldd	r24, Y+10	; 0x0a
    3184:	9b 85       	ldd	r25, Y+11	; 0x0b
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9f 83       	std	Y+7, r25	; 0x07
    3190:	8e 83       	std	Y+6, r24	; 0x06
    3192:	8e 81       	ldd	r24, Y+6	; 0x06
    3194:	9f 81       	ldd	r25, Y+7	; 0x07
    3196:	9b 83       	std	Y+3, r25	; 0x03
    3198:	8a 83       	std	Y+2, r24	; 0x02
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <Ultrasonic_Trigger+0x172>
    31a2:	9b 83       	std	Y+3, r25	; 0x03
    31a4:	8a 83       	std	Y+2, r24	; 0x02
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a8:	69 89       	ldd	r22, Y+17	; 0x11
    31aa:	7a 89       	ldd	r23, Y+18	; 0x12
    31ac:	8b 89       	ldd	r24, Y+19	; 0x13
    31ae:	9c 89       	ldd	r25, Y+20	; 0x14
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	88 8b       	std	Y+16, r24	; 0x10
    31ba:	88 89       	ldd	r24, Y+16	; 0x10
    31bc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	8a 95       	dec	r24
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <Ultrasonic_Trigger+0x194>
    31c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
	GPIO_writePin(ULTRASONIC_TR_PORT_ID,ULTRASONIC_TR_PIN_ID,LOGIC_LOW);
    31c6:	83 e0       	ldi	r24, 0x03	; 3
    31c8:	67 e0       	ldi	r22, 0x07	; 7
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_writePin>
}
    31d0:	68 96       	adiw	r28, 0x18	; 24
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <Ultrasonic_readDistance>:
uint16 Ultrasonic_readDistance(void)
{
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
	/* Send the trigger pulse by using the Ultrasonic_Trigger function.*/
	Ultrasonic_Trigger();
    31ea:	0e 94 16 18 	call	0x302c	; 0x302c <Ultrasonic_Trigger>
	/*Start the measurement process via the ICU driver*/
	distance=(recieve_time) / 117.6;
    31ee:	80 91 87 01 	lds	r24, 0x0187
    31f2:	90 91 88 01 	lds	r25, 0x0188
    31f6:	a0 91 89 01 	lds	r26, 0x0189
    31fa:	b0 91 8a 01 	lds	r27, 0x018A
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	23 e3       	ldi	r18, 0x33	; 51
    3210:	33 e3       	ldi	r19, 0x33	; 51
    3212:	4b ee       	ldi	r20, 0xEB	; 235
    3214:	52 e4       	ldi	r21, 0x42	; 66
    3216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	90 93 8c 01 	sts	0x018C, r25
    322e:	80 93 8b 01 	sts	0x018B, r24
	return distance;
    3232:	80 91 8b 01 	lds	r24, 0x018B
    3236:	90 91 8c 01 	lds	r25, 0x018C
}
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <Ultrasonic_edgeProcessing>:
void Ultrasonic_edgeProcessing(void)
{
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
	/*This is the callback function called by the ICU driver.*/
	/*It calculates the high time (pulse time) generated by
	the ultrasonic sensor. */
	edge_count++;
    3248:	80 91 86 01 	lds	r24, 0x0186
    324c:	8f 5f       	subi	r24, 0xFF	; 255
    324e:	80 93 86 01 	sts	0x0186, r24
	if(1==edge_count)
    3252:	80 91 86 01 	lds	r24, 0x0186
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	31 f4       	brne	.+12     	; 0x3266 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();
    325a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	0e 94 ad 0b 	call	0x175a	; 0x175a <ICU_setEdgeDetectionType>
    3264:	17 c0       	rjmp	.+46     	; 0x3294 <Ultrasonic_edgeProcessing+0x54>
	}
	else if(2==edge_count)
    3266:	80 91 86 01 	lds	r24, 0x0186
    326a:	82 30       	cpi	r24, 0x02	; 2
    326c:	89 f4       	brne	.+34     	; 0x3290 <Ultrasonic_edgeProcessing+0x50>
	{
		recieve_time=ICU_getInputCaptureValue();
    326e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ICU_getInputCaptureValue>
    3272:	cc 01       	movw	r24, r24
    3274:	a0 e0       	ldi	r26, 0x00	; 0
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	80 93 87 01 	sts	0x0187, r24
    327c:	90 93 88 01 	sts	0x0188, r25
    3280:	a0 93 89 01 	sts	0x0189, r26
    3284:	b0 93 8a 01 	sts	0x018A, r27
		ICU_setEdgeDetectionType(RAISING);
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	0e 94 ad 0b 	call	0x175a	; 0x175a <ICU_setEdgeDetectionType>
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <Ultrasonic_edgeProcessing+0x54>
	}
	else
	{
		edge_count =0;
    3290:	10 92 86 01 	sts	0x0186, r1

	}
}
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <__prologue_saves__>:
    329a:	2f 92       	push	r2
    329c:	3f 92       	push	r3
    329e:	4f 92       	push	r4
    32a0:	5f 92       	push	r5
    32a2:	6f 92       	push	r6
    32a4:	7f 92       	push	r7
    32a6:	8f 92       	push	r8
    32a8:	9f 92       	push	r9
    32aa:	af 92       	push	r10
    32ac:	bf 92       	push	r11
    32ae:	cf 92       	push	r12
    32b0:	df 92       	push	r13
    32b2:	ef 92       	push	r14
    32b4:	ff 92       	push	r15
    32b6:	0f 93       	push	r16
    32b8:	1f 93       	push	r17
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	ca 1b       	sub	r28, r26
    32c4:	db 0b       	sbc	r29, r27
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	09 94       	ijmp

000032d2 <__epilogue_restores__>:
    32d2:	2a 88       	ldd	r2, Y+18	; 0x12
    32d4:	39 88       	ldd	r3, Y+17	; 0x11
    32d6:	48 88       	ldd	r4, Y+16	; 0x10
    32d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    32da:	6e 84       	ldd	r6, Y+14	; 0x0e
    32dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    32de:	8c 84       	ldd	r8, Y+12	; 0x0c
    32e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    32e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    32e4:	b9 84       	ldd	r11, Y+9	; 0x09
    32e6:	c8 84       	ldd	r12, Y+8	; 0x08
    32e8:	df 80       	ldd	r13, Y+7	; 0x07
    32ea:	ee 80       	ldd	r14, Y+6	; 0x06
    32ec:	fd 80       	ldd	r15, Y+5	; 0x05
    32ee:	0c 81       	ldd	r16, Y+4	; 0x04
    32f0:	1b 81       	ldd	r17, Y+3	; 0x03
    32f2:	aa 81       	ldd	r26, Y+2	; 0x02
    32f4:	b9 81       	ldd	r27, Y+1	; 0x01
    32f6:	ce 0f       	add	r28, r30
    32f8:	d1 1d       	adc	r29, r1
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	ed 01       	movw	r28, r26
    3306:	08 95       	ret

00003308 <itoa>:
    3308:	fb 01       	movw	r30, r22
    330a:	9f 01       	movw	r18, r30
    330c:	e8 94       	clt
    330e:	42 30       	cpi	r20, 0x02	; 2
    3310:	c4 f0       	brlt	.+48     	; 0x3342 <itoa+0x3a>
    3312:	45 32       	cpi	r20, 0x25	; 37
    3314:	b4 f4       	brge	.+44     	; 0x3342 <itoa+0x3a>
    3316:	4a 30       	cpi	r20, 0x0A	; 10
    3318:	29 f4       	brne	.+10     	; 0x3324 <itoa+0x1c>
    331a:	97 fb       	bst	r25, 7
    331c:	1e f4       	brtc	.+6      	; 0x3324 <itoa+0x1c>
    331e:	90 95       	com	r25
    3320:	81 95       	neg	r24
    3322:	9f 4f       	sbci	r25, 0xFF	; 255
    3324:	64 2f       	mov	r22, r20
    3326:	77 27       	eor	r23, r23
    3328:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodhi4>
    332c:	80 5d       	subi	r24, 0xD0	; 208
    332e:	8a 33       	cpi	r24, 0x3A	; 58
    3330:	0c f0       	brlt	.+2      	; 0x3334 <itoa+0x2c>
    3332:	89 5d       	subi	r24, 0xD9	; 217
    3334:	81 93       	st	Z+, r24
    3336:	cb 01       	movw	r24, r22
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	a1 f7       	brne	.-24     	; 0x3324 <itoa+0x1c>
    333c:	16 f4       	brtc	.+4      	; 0x3342 <itoa+0x3a>
    333e:	5d e2       	ldi	r21, 0x2D	; 45
    3340:	51 93       	st	Z+, r21
    3342:	10 82       	st	Z, r1
    3344:	c9 01       	movw	r24, r18
    3346:	0c 94 a5 19 	jmp	0x334a	; 0x334a <strrev>

0000334a <strrev>:
    334a:	dc 01       	movw	r26, r24
    334c:	fc 01       	movw	r30, r24
    334e:	67 2f       	mov	r22, r23
    3350:	71 91       	ld	r23, Z+
    3352:	77 23       	and	r23, r23
    3354:	e1 f7       	brne	.-8      	; 0x334e <strrev+0x4>
    3356:	32 97       	sbiw	r30, 0x02	; 2
    3358:	04 c0       	rjmp	.+8      	; 0x3362 <strrev+0x18>
    335a:	7c 91       	ld	r23, X
    335c:	6d 93       	st	X+, r22
    335e:	70 83       	st	Z, r23
    3360:	62 91       	ld	r22, -Z
    3362:	ae 17       	cp	r26, r30
    3364:	bf 07       	cpc	r27, r31
    3366:	c8 f3       	brcs	.-14     	; 0x335a <strrev+0x10>
    3368:	08 95       	ret

0000336a <__udivmodhi4>:
    336a:	aa 1b       	sub	r26, r26
    336c:	bb 1b       	sub	r27, r27
    336e:	51 e1       	ldi	r21, 0x11	; 17
    3370:	07 c0       	rjmp	.+14     	; 0x3380 <__udivmodhi4_ep>

00003372 <__udivmodhi4_loop>:
    3372:	aa 1f       	adc	r26, r26
    3374:	bb 1f       	adc	r27, r27
    3376:	a6 17       	cp	r26, r22
    3378:	b7 07       	cpc	r27, r23
    337a:	10 f0       	brcs	.+4      	; 0x3380 <__udivmodhi4_ep>
    337c:	a6 1b       	sub	r26, r22
    337e:	b7 0b       	sbc	r27, r23

00003380 <__udivmodhi4_ep>:
    3380:	88 1f       	adc	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	5a 95       	dec	r21
    3386:	a9 f7       	brne	.-22     	; 0x3372 <__udivmodhi4_loop>
    3388:	80 95       	com	r24
    338a:	90 95       	com	r25
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	08 95       	ret

00003392 <_exit>:
    3392:	f8 94       	cli

00003394 <__stop_program>:
    3394:	ff cf       	rjmp	.-2      	; 0x3394 <__stop_program>
